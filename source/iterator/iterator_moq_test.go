// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package iterator

import (
	"context"
	sdk "github.com/conduitio/conduit-connector-sdk"
	"sync"
)

// Ensure, that IteratorMock does implement Iterator.
// If this is not the case, regenerate this file with moq.
var _ Iterator = &IteratorMock{}

// IteratorMock is a mock implementation of Iterator.
//
// 	func TestSomethingThatUsesIterator(t *testing.T) {
//
// 		// make and configure a mocked Iterator
// 		mockedIterator := &IteratorMock{
// 			HasNextFunc: func(ctx context.Context) bool {
// 				panic("mock out the HasNext method")
// 			},
// 			NextFunc: func(ctx context.Context) (sdk.Record, error) {
// 				panic("mock out the Next method")
// 			},
// 			StopFunc: func()  {
// 				panic("mock out the Stop method")
// 			},
// 		}
//
// 		// use mockedIterator in code that requires Iterator
// 		// and then make assertions.
//
// 	}
type IteratorMock struct {
	// HasNextFunc mocks the HasNext method.
	HasNextFunc func(ctx context.Context) bool

	// NextFunc mocks the Next method.
	NextFunc func(ctx context.Context) (sdk.Record, error)

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// HasNext holds details about calls to the HasNext method.
		HasNext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Next holds details about calls to the Next method.
		Next []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockHasNext sync.RWMutex
	lockNext    sync.RWMutex
	lockStop    sync.RWMutex
}

// HasNext calls HasNextFunc.
func (mock *IteratorMock) HasNext(ctx context.Context) bool {
	if mock.HasNextFunc == nil {
		panic("IteratorMock.HasNextFunc: method is nil but Iterator.HasNext was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHasNext.Lock()
	mock.calls.HasNext = append(mock.calls.HasNext, callInfo)
	mock.lockHasNext.Unlock()
	return mock.HasNextFunc(ctx)
}

// HasNextCalls gets all the calls that were made to HasNext.
// Check the length with:
//     len(mockedIterator.HasNextCalls())
func (mock *IteratorMock) HasNextCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHasNext.RLock()
	calls = mock.calls.HasNext
	mock.lockHasNext.RUnlock()
	return calls
}

// Next calls NextFunc.
func (mock *IteratorMock) Next(ctx context.Context) (sdk.Record, error) {
	if mock.NextFunc == nil {
		panic("IteratorMock.NextFunc: method is nil but Iterator.Next was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc(ctx)
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedIterator.NextCalls())
func (mock *IteratorMock) NextCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *IteratorMock) Stop() {
	if mock.StopFunc == nil {
		panic("IteratorMock.StopFunc: method is nil but Iterator.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedIterator.StopCalls())
func (mock *IteratorMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
